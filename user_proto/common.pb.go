// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package user_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ECmd int32

const (
	ECmd_UNKNOWN        ECmd = 0
	ECmd_E_LOGIN_REQ    ECmd = 1005
	ECmd_E_LOGIN_RSP    ECmd = 1006
	ECmd_E_ZONE_GET_REQ ECmd = 1015
	ECmd_E_ZONE_GET_RSP ECmd = 1016
)

var ECmd_name = map[int32]string{
	0:    "UNKNOWN",
	1005: "E_LOGIN_REQ",
	1006: "E_LOGIN_RSP",
	1015: "E_ZONE_GET_REQ",
	1016: "E_ZONE_GET_RSP",
}

var ECmd_value = map[string]int32{
	"UNKNOWN":        0,
	"E_LOGIN_REQ":    1005,
	"E_LOGIN_RSP":    1006,
	"E_ZONE_GET_REQ": 1015,
	"E_ZONE_GET_RSP": 1016,
}

func (x ECmd) String() string {
	return proto.EnumName(ECmd_name, int32(x))
}

func (ECmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

//错误码
type Errorinfo struct {
	ErrorCode            uint32   `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorInfo            []byte   `protobuf:"bytes,2,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Errorinfo) Reset()         { *m = Errorinfo{} }
func (m *Errorinfo) String() string { return proto.CompactTextString(m) }
func (*Errorinfo) ProtoMessage()    {}
func (*Errorinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *Errorinfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Errorinfo.Unmarshal(m, b)
}
func (m *Errorinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Errorinfo.Marshal(b, m, deterministic)
}
func (m *Errorinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Errorinfo.Merge(m, src)
}
func (m *Errorinfo) XXX_Size() int {
	return xxx_messageInfo_Errorinfo.Size(m)
}
func (m *Errorinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Errorinfo.DiscardUnknown(m)
}

var xxx_messageInfo_Errorinfo proto.InternalMessageInfo

func (m *Errorinfo) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Errorinfo) GetErrorInfo() []byte {
	if m != nil {
		return m.ErrorInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("user_proto.ECmd", ECmd_name, ECmd_value)
	proto.RegisterType((*Errorinfo)(nil), "user_proto.errorinfo")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d, 0x8a, 0x07,
	0xb3, 0x95, 0x3c, 0xb9, 0x38, 0x53, 0x8b, 0x8a, 0xf2, 0x8b, 0x32, 0xf3, 0xd2, 0xf2, 0x85, 0x64,
	0xb9, 0xb8, 0xc0, 0x9c, 0xf8, 0xe4, 0xfc, 0x94, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xde, 0x20,
	0x88, 0xb4, 0x73, 0x7e, 0x4a, 0x2a, 0x42, 0x1a, 0xa4, 0x58, 0x82, 0x49, 0x81, 0x51, 0x83, 0x07,
	0x2a, 0xed, 0x99, 0x97, 0x96, 0xaf, 0x95, 0xc8, 0xc5, 0xe2, 0xea, 0x9c, 0x9b, 0x22, 0xc4, 0xcd,
	0xc5, 0x1e, 0xea, 0xe7, 0xed, 0xe7, 0x1f, 0xee, 0x27, 0xc0, 0x20, 0x24, 0xc0, 0xc5, 0xed, 0x1a,
	0xef, 0xe3, 0xef, 0xee, 0xe9, 0x17, 0x1f, 0xe4, 0x1a, 0x28, 0xf0, 0x96, 0x1d, 0x45, 0x24, 0x38,
	0x40, 0xe0, 0x1d, 0xbb, 0x90, 0x30, 0x17, 0x9f, 0x6b, 0x7c, 0x94, 0xbf, 0x9f, 0x6b, 0xbc, 0xbb,
	0x6b, 0x08, 0x58, 0xd9, 0x77, 0x0c, 0xc1, 0xe0, 0x00, 0x81, 0x1f, 0xec, 0x49, 0x6c, 0x60, 0x47,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x27, 0x62, 0xb5, 0xff, 0xd0, 0x00, 0x00, 0x00,
}
